// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Banks');
gettext('Bus');
gettext('Machines');
gettext('MapIO');
gettext('Regs');
gettext('SMemory');
gettext('01-bit-regs');
gettext('02-bits-regs');
gettext('08-bits-regs');
gettext('Blocks');
gettext('Bank-2x1-paralell');
gettext('Bank of 2 registers of 1 bits (implemented in verilog). Addition output in paralell');
gettext('Bank-2x1');
gettext('Bank of 2 registers of 1 bits (implemented in verilog)');
gettext('Bank-4x1-paralell');
gettext('Bank of 4 registers of 1 bits with paralell output (implemented in verilog)');
gettext('Bank-4x1');
gettext('Bank of 4 registers of 1 bits (implemented in verilog)');
gettext('Bank-8x1-paralell');
gettext('Bank of 8 registers of 1 bits with paralell output (implemented in verilog)');
gettext('Bank-8x1');
gettext('Bank of 8 registers of 1 bits (implemented in verilog)');
gettext('Bank-2x1-paralell');
gettext('Bank of 2 registers of 1 bits with aditional output in paralell (implemented with blocks)');
gettext('1-Bit register (Implemented with icestudio blocks)');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Multiplexor de 2 a 1');
gettext('Demultiplexor de 1 bit, de 1 a 2');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('1-bit register  \nAddress: 1');
gettext('1-bit register  \nAddress: 0');
gettext('Select the output  \naccording to the address');
gettext('Write the data to the regs  \nlocated in address addr');
gettext('1-2 demux');
gettext('Output in paralell');
gettext('Mux 2-1');
gettext('D Flip-flip\n(System)');
gettext('Bank-2x1');
gettext('Bank of 2 registers of 1 bits (implemented with blocks)');
gettext('Bank-4x1-paralell');
gettext('Bank of 4 registers of 1 bits with paralell output  (implemented with blocks)');
gettext('Demultiplexor de 1 bit, de 2 a 4');
gettext('4-1 Mux. Sel is a bus');
gettext('Agregador de 4 cables en un bus de 4-bits');
gettext('1-4 demux');
gettext('1-bit register  \nAddress: 3');
gettext('1-bit register  \nAddress: 2');
gettext('Bank-4x1');
gettext('Bank of 4 registers of 1 bits (implemented with blocks)');
gettext('Bank-8x1-paralell');
gettext('Bank of 8 registers of 1 bits with paralell output (implemented with blocks)');
gettext('Separador de bus de 3-bits, en dos de 1 y 2 bits');
gettext('Agregador de 2 buses de 4-bits a bus de 8-bits');
gettext('Bank 1');
gettext('4x1 Reg Bank');
gettext('Select the output  \nof the Bank (0/1)');
gettext('Bank selection  \n1: Bank 1  \n0: Bank 0  ');
gettext('Bank 0');
gettext('Divide the addr into two fields:  \n* Bank: Select the bank (0/1)  \n* Register inside the bank (0-3)');
gettext('Output in paralell  \n(Reg: 0-7)');
gettext('Bank-8x1');
gettext('Bank of 8 registers of 1 bits (implemented with blocks)');
gettext('bank-2x2');
gettext('Bank of 2 registers of 2 bits');
gettext('2-bits register (implemented with blocks)');
gettext('Separador de bus de 2-bits en dos cables');
gettext('2-bits 4-1 Mux (The selection is a bus)');
gettext('Blocks');
gettext('bank-2x8');
gettext('Bank of 2 registers of 8 bits (implemented in verilog)');
gettext('bank-4x8');
gettext('Bank of 4 registers of 8 bits (implemented in verilog)');
gettext('bank-8x8');
gettext('Bank of 8 registers of 8 bits (implemented in verilog)');
gettext('bank-2x8');
gettext('Bank of 2 registers of 8 bits (implemented with blocks)');
gettext('8-bits register (implemented with blocks)');
gettext('Separador de bus de 8-bits en buses de 4 bits');
gettext('4-bits register (implemented with blocks)');
gettext('Separador de bus de 4-bits en buses de 2 bits');
gettext('Agregador de buses de 2-bits a bus de 4-bits');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('8-bit register  \nAddress: 1');
gettext('8-bit register  \nAddress: 0');
gettext('bank-4x8');
gettext('Bank of 4 registers of 8 bits (implemented with blocks)');
gettext('Multiplexor de 4 a 1 de 8 bits');
gettext('8-bit register  \nAddress: 2');
gettext('8-bit register  \nAddress: 3');
gettext('bank-8x8');
gettext('Bank of 8 registers of 8 bits (implemented with blocks)');
gettext('4x8 Bank (0)');
gettext('Select the 4x8 bank');
gettext('4x8 Bank (1)');
gettext('Bytes');
gettext('16B');
gettext('2B');
gettext('4B');
gettext('8B');
gettext('Join');
gettext('Join the fields into one 16B memory bus');
gettext('split');
gettext('Split a 16B memory bus into its fields');
gettext('Join');
gettext('Join the fields into one 2B memory bus');
gettext('Split');
gettext('Split a 2B memory bus into its fields');
gettext('Join');
gettext('Join the fields into one 4B memory bus');
gettext('Split');
gettext('Split a 4B memory bus into its fields');
gettext('Join');
gettext('Join the fields into one 8B memory bus');
gettext('split');
gettext('Split a 8B memory bus into its fields');
gettext('Bytes');
gettext('16B');
gettext('2B');
gettext('4B');
gettext('8B');
gettext('download');
gettext('16B memory download machine');
gettext('Un bit constante a 0');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Puerta NOT');
gettext('Puerta AND');
gettext('Puerta OR');
gettext('Transmit one character to the STDOUT bus');
gettext('Biestable de almacenamiento del estado de la máquina');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Detector de flancos de subida y bajada. Emite tic por las salidas correspondientes al detecta los flancos');
gettext('Extract the next signal from the stdout bus');
gettext('10 bits, 2-1 Multiplexor');
gettext('stdout bus joiner (data + tic)');
gettext('Multiplexor de 2 a 1 de 14 bits');
gettext('Máquina de contar, de 4 bits');
gettext('Registro de 4 bits con entrada de reset');
gettext('Sumador de un operando de 4 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 4 bits');
gettext('Valor genérico constante (menos 1), de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Reading data from memory  \nReading bus status');
gettext('Calculate if the bus can be taken');
gettext('The bus is available');
gettext('This circuits wants  \nto use the bus');
gettext('The bus has been already  \ntaken');
gettext('One cycle after the machine is done  \nthe bus is already taken to write  \nthe bbusy signal to 0 and allow  \nother circuits to use it');
gettext('The output bus is controlled  \nby this circuit (1) or  \nremain untouched (0)');
gettext('The reading machine  \ncan be started');
gettext('Reading machine');
gettext('## Download machine\n\nTransmit all the memory contents through the serial port  \nThe bytes are transmited raw (in binary). No ascii encoding  \nThere should be a program running on the computer capable of  \nreading these raw bytes');
gettext('## PUTC: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification    \n\nWhen the machine starts, the char is outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The byte from the  \ninput char is transmited');
gettext('Char to be transmited');
gettext('State of the machine:  \n1: ON: transmitting  \n2: OFF: transparent mode  ');
gettext('If the machine is on  \nand the character has been  \ntransmitted: Turn it off');
gettext('The machine has finished');
gettext('**STDOUT BUS**');
gettext('Not connected');
gettext('**Create the bus**  \nfrom the data and tic signals');
gettext('Transparent mode...  \nor not');
gettext('**Tic de apagado**');
gettext('**Tic de encendido**');
gettext('**Inicializar**');
gettext('**Estado de la máquina**');
gettext('## Detector doble: flancos de subida y bajada\n\nSe detectan tanto los flancos de subida como de bajada y se emite los  \ntics por sus salidas correspondientes');
gettext('Señal de  \nentrada');
gettext('Reloj del  \nsistema');
gettext('**Reloj del sistema**');
gettext('**Estado de**  \n**la máquina**');
gettext('Máquina encendida');
gettext('Máquina apagada  \n(rst = 1)');
gettext('Tic de arranque');
gettext('Tic de fin');
gettext('**Contador de ciclos**');
gettext('Número de ciclos  \ncontados');
gettext('Valor  \nincrementado');
gettext('### Salidas');
gettext('Estado de la máquina');
gettext('Ciclo actual');
gettext('Cuenta finalizada');
gettext('Ejecutar el ciclo');
gettext('Número de ciclos  \na contar');
gettext('¿Estamos en el  \nciclo k-1?');
gettext('Solo se hace caso a la  \nentrada next si la  \nmáquina está encendida');
gettext('Nuevo ciclo');
gettext('Si es el ciclo k-1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Apagar la  \nmáquina');
gettext('Ciclo nuevo:  \nincrementar la cuenta');
gettext('El tic de start se saca  \npor exec para que se ejecute  \nel primer ciclo');
gettext('Si la máquina está  \napagada, las señales  \nde ejecución no pueden  \nsalir!');
gettext('Retrasar la señal un ciclo  \nmientras que se detecta si  \nla máquina ha finalizado o no');
gettext('dump-tx');
gettext('16B Memory dump tx machine');
gettext('Serial transmiter for the stdout bus (1 char buffer)');
gettext('stdout bus splitter into data and tic signals');
gettext('Convert the 1-bit next signal into a 10-bit stdout bus');
gettext('Serial transmitter with a buffer for 1 byte');
gettext('Transmisor serie');
gettext('1-byte buffer');
gettext('Registro de 8 bits');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('16B memory dump machine');
gettext('Print a constant string of 63 or less characters');
gettext('Comparador de un operando de 8 bits. Se compara si el operando es igual al parámetro');
gettext('Un bit constante a 1');
gettext('64-bytes memory, initilized with a string');
gettext('Máquina de contar, de 6 bits, con entrada de stop');
gettext('Registro de 6 bits con reset');
gettext('6-bits adder. One operand is a constant (no carry)');
gettext('two operand 6-bits comparator');
gettext('Valor genérico constante (menos 1), de 6 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Print a constant string of 3 or less characters');
gettext('Máquina de contar, de 2 bits (cuenta hasta 4 ciclos)');
gettext('Registro de 2 bits con reset');
gettext('Sumador de un operando de 2 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 2 bits');
gettext('Valor genérico constante (menos 1), de 2 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('4-bytes memory, initilized with a string');
gettext('Print a byte in hexadecimal numbers');
gettext('Máquina de contar, de 1 bit');
gettext('Biestable de cambio (Tipo T) con reset. Cuando se recibe un tic cambia de estado');
gettext('Multiplexor de 2 a 1 de 4 bits');
gettext('Transmit a 4-bits hex number (characteres 0 - 9, a - f)');
gettext('Circuito combinacional de 4 entradas y 8 salidas');
gettext('Separador de bus de 4-bits en 4 cables');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Comparador menor que, de un operando de 4 bits');
gettext('Print a constant string of 7 or less characters');
gettext('8-bytes memory, initilized with a string');
gettext('Máquina de contar, de 3 bits, con stop');
gettext('Registro de 3 bits con entrada de reset');
gettext('Comparador de dos operandos de 3 bits');
gettext('Valor genérico constante (menos 1), de 3 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Sumador de un operando de 3 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('## STDOUT serial\n\nSerial transmitter for the STDOUT bus\n');
gettext('**STDOUT Bus**  \n* Data to transmit (8 bits)  \n* tic (1 bit)\n* data sent (done tic, 1 bit)');
gettext('Empty Buffer  \n(There is no byte  \nwaiting)');
gettext('Byte stored in the  \nbuffer, waiting to be  \ntransmitted when the  \ntransmitter is ready');
gettext('Buffer state:  \n0: empty  \n1: full');
gettext('Transmitter ready');
gettext('If the transmittter is ready  \nand there is a character  \nin the buffer: Transmit!');
gettext('Serial transmitter state');
gettext('This circuit wants  \nto use the bus');
gettext('count machine');
gettext('## Print each entry of the table');
gettext('## Dump machine\n\nDump the contents of the memory to the serial port  \nThe data is shown in Hexadecimal ASCII\n\nExample:\n\n```\n| Addr | Data |\n|------|------|\n| 00   | 03   |\n| 01   | 0F   |\n| 02   | 3F   |\n| 03   | FF   |\n| 04   | FC   |\n| 05   | F0   |\n| 06   | C0   |\n| 07   | 00   |\n```\n...\n');
gettext('## PRINT: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification     \n\nWhen the machine starts, the first chars outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The transmision of  \nthe bytes is started');
gettext('Transmit the next  \ncharacter from the string');
gettext('Tic output: Execute!');
gettext('Count machine. It is counting  \nuntil the stop signal is  \nactivated');
gettext('If the character read is 0  \nwe have reached the end of  \nthe string');
gettext('Memory with the string  \nto be transmited');
gettext('Apagado automática,  \ncuando la máquina  \ntermina');
gettext('Apagado manual');
gettext('Para automático de la  \nmáquina cuando ha terminado  ');
gettext('Paro externo');
gettext('First the MSB is  \nprinter, then the LSB');
gettext('Bit to print:  \n0: Bit 0  \n1: Bit 1');
gettext('2-state machine  \nTwo operation are needed');
gettext('Print the current  \nhex digit');
gettext('Store the nunmber  \nto print');
gettext('Number to print');
gettext('Transmit now! (tic)  \nActivate the machine');
gettext('## PUTC-base4-bin: Transmit one base-4 number in Binary\n\nWhen activated, the base-4 number is sent as two binary  \ncharacters (0/1)');
gettext('¿Estamos en el  \nciclo 1?');
gettext('Si es el ciclo 1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('## PUTC: Transmit 4bits as an hexadecimal digit (STDOUT bus)\n');
gettext('Write the digits (a-f) in  \nuppercase by default');
gettext('Condition: is the number  \nreceived between 10 and 15?  \n(a to f digit?)');
gettext('The digits a-f are changed to uppercase  \nby setting the 5th bit to 0 or 1');
gettext('dump');
gettext('icerok-probe');
gettext('16B memory. Bus interface');
gettext('16 Bytes Synchronous memory');
gettext('16B memory sample machine. Captura the input data and store it in the memory');
gettext('8-bits register (in verilog)');
gettext('Serial transmiter for the stdout bus, with sysclk parameter');
gettext('Serial transmitter with system clock freq parameter');
gettext('## Icerok-probe machine\n\nMachine for capturing data, storing it in the memory and transmit  \nto the computer by serial port');
gettext('Writing the data to the memory on  \nevery system clock cycle');
gettext('Transmiting the raw memory contents  \nto the computer, by serial port');
gettext('When the sampling is done  \ntransmit the information to  \nthe computer');
gettext('Memory were the data  \nis stored');
gettext('## Sample machine\n\nRead the input data, (one byte per clock cycle) and store it into the memory\n\n');
gettext('init');
gettext('16B memory init machine. Initilize the memory with consecutive numbers');
gettext('Sumador de un operando de 8 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('## Init machine\n\nInitilize the memory starting from the address 0. The first value written   \nis the ini parameter. Then, it is incremented by 1 and  \nwritten in the following address:\n\n0: ini  \n1: ini+1  \n2: ini+2  \n3: init+3  \n...\n');
gettext('sample');
gettext('seq');
gettext('16B memory seq machine');
gettext('Temporizador en milisegundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('Time to wait between two reads');
gettext('## Sequence machine:\n\nIt reads the whole memory, one byte at a time. Each read byte is  \nwritten to the data output along with its validation tic  \nIt starts from address 0. A done tic is emitted when finished  \nThe time is ms between two consecutive reads is a parameter set  \nby the user (300ms by default)\n\nThe typical application of this machine is to show the memory content  \non the LEDs');
gettext('**Arranque del**  \n**temporizador**');
gettext('**Salida de pulso**');
gettext('**Salida de tic**');
gettext('**Parametro del timer**  \nmilisegundos a esperar');
gettext('sum');
gettext('16B memory sum. Calculates M0 = M1 + M2 + ..+ M15');
gettext('Sumador de un dos operandos de 8 bits (sin acarreo)');
gettext('Separador de bus de 3-bits');
gettext('8-bits register with reset (in verilog)');
gettext('Máquina de contar, de 5 bits');
gettext('Registro de 5 bits');
gettext('5-bits adder. One operand is a constant (no carry)');
gettext('two operand 5-bits comparator');
gettext('Valor genérico constante (menos 1), de 5 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Circuito combinacional de 5 entradas y 7 salidas');
gettext('Habilitación de bus de 7 bits');
gettext('Split a 7-bits-buts into two: 4-bits and 3-bits');
gettext('Data from memory');
gettext('## Controller');
gettext('## Datapath');
gettext('## Sum machine \n\nMachine for calculate the operation M0 = M1 + M2 +...+ M7, where  \nMx is the data located at address x  \nrespectivelly\n\nThe Architecture of this machine is divided into:\n* Datapath  \n* Controller\n\nThe controller has been implemented using µinstructions');
gettext('Accumulator register');
gettext('µcmd: loading the register A');
gettext('µcmds generation');
gettext('Count machine: it reads sequentially the  \ntable with the µinstructions');
gettext('test-acc');
gettext('16B memory test acc. Calculates M0 = M0 + M1');
gettext('Circuito combinacional de 3 entradas y 4 salidas');
gettext('Habilitación de bus de 4 bits');
gettext('Agregador de buses de 3 y 1-bits a a bus de 4-bits');
gettext('Valor constante 0 para bus de 3 bits');
gettext('Valor genérico constante, de 3 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('## Test-acc machine \n\nMachine for calculate the operation M0 = M0 + M1, where  \nM0 and M1 are the data located at addresses 0 and 1  \nrespectivelly\n\nThe Architecture of this machine is divided into:\n* Datapath  \n* Controller\n\nThe controller has been implemented using µinstructions');
gettext('µcmd: Add A to the current data  \nfrom memory');
gettext('Only address 00 and 01 are  \nused (1 bit)');
gettext('upload');
gettext('16B memory upload machine. Initilize the memory with data from the stdin');
gettext('stdin bus splitter into data and tic signals');
gettext('Máquina de contar, de 4 bits, con entrada de stop');
gettext('Count machine');
gettext('## upload machine\n\nWrite data into the memory. The data is taken from the serial port. Once the  \nmemory is full, the machine is done\n');
gettext('browse');
gettext('2B memory browse machine');
gettext('11 bits, 2-1 Multiplexer');
gettext('Biestable de cambio (Tipo T). Cuando se recibe un tic cambia de estado');
gettext('download');
gettext('2B memory download machine');
gettext('dump-tx');
gettext('2B Memory dump tx machine');
gettext('2B memory dump machine');
gettext(' Transmit one bit as a character. STDOUT-bus');
gettext('## Dump machine\n\nDump the contents of the memory to the serial port  \nThe data is shown in Hexadecimal ASCII\n\nExample:\n\n```\n| Addr | Data |\n|------|------|\n| 0    | 55   |\n| 1    | AA   |\n```\n...\n');
gettext('## PUTC-bit-stdout: Transmit one bit (STDOUT bus)  \n\nWhen activated, the bit input is sent as the character '0' or '1'  \nWhen not active, the stdout crossed the block (transparent mode)');
gettext('Bit to be transmited');
gettext('The bit to be transmitted should be  \nsyncronized with its transmit tic');
gettext('If the machine is ready and  \nthe next tic is received:  \nwe are done');
gettext('The machine is done');
gettext('Machine is on: send a character');
gettext('State of the machine  \n0: OFF  \n1: ON: Sending one character');
gettext('Character to transmit when  \nthe input bit is 1');
gettext('Character to transmit when  \nthe input bit is 0');
gettext('Select with character to transmit  \naccording to the input bit');
gettext('dump');
gettext('icerok-probe');
gettext('2 bytes buffer Logic analicer probe');
gettext('2B memory. Bus interface');
gettext('2 Bytes Synchronous memory');
gettext('2B memory sample machine. Captura the input data and store it in the memory');
gettext('init');
gettext('2B memory init machine. Initilize the memory with consecutive numbers');
gettext('Agregador de un bus de 7 bits y un cable a bus de 8-bits');
gettext('Valor genérico constante, de 7 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('sample');
gettext('seq-inf');
gettext('2B memory seq-inf machine. Reproduce the sequence infinitely, until the stop signal is received');
gettext('Máquina de contar, de 1 bit, con entrada de Stop');
gettext('Codificador de 2 a 1. La salida zero se activa cuando ninguna entrada está activada');
gettext('Type of stop:  \n0: Internal (done)  \n1: External (abort)');
gettext('seq');
gettext('2B memory seq machine');
gettext('test-acc');
gettext('2B memory test acc. Calculates M0 = M0 + M1');
gettext('upload-proto');
gettext('2B memory upload machine with stdout protocol. Initilize the memory with data from the stdin');
gettext('Transmit one constant character to the STDOUT bus');
gettext('## PUTC: Transmit one constant character ');
gettext('upload');
gettext('2B memory upload machine. Initilize the memory with data from the stdin');
gettext('download');
gettext('4B memory download machine');
gettext('12 bits, 2-1 Multiplexer');
gettext('dump-tx');
gettext('4B Memory dump tx machine');
gettext('4B memory dump machine');
gettext('Agregador de 2 buses de 6 y 2-bits a bus de 8-bits');
gettext('Valor constante 0, de 6 bits');
gettext('Valor genérico constante, de 6 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('## Dump machine\n\nDump the contents of the memory to the serial port  \nThe data is shown in Hexadecimal ASCII\n\nExample:\n\n```\n| Addr | Data |\n|------|------|\n| 00   | 55   |\n| 01   | AA   |\n| 02   | F0   |\n| 03   | 0F   |\n```\n...\n');
gettext('dump');
gettext('icerok-probe');
gettext('4 bytes buffer Logic analicer probe');
gettext('4B memory. Bus interface');
gettext('4 Bytes Synchronous memory');
gettext('Valor constante 0 para bus de 2 bits');
gettext('Valor genérico constante, de 2 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('4B memory sample machine. Captura the input data and store it in the memory');
gettext('init');
gettext('4B memory init machine. Initilize the memory with consecutive numbers');
gettext('sample');
gettext('seq');
gettext('4B memory seq machine');
gettext('sum');
gettext('4B memory sum. Calculates M0 = M1 + M2 + M3');
gettext('Circuito combinacional de 3 entradas y 5 salidas');
gettext('Habilitación de bus de 5 bits');
gettext('Split a 5-bits bus into 2-bits and 3-bits buses');
gettext('## Sum machine \n\nMachine for calculate the operation M0 = M1 + M2 + M3, where  \nMx is the data located at address x  \nrespectivelly\n\nThe Architecture of this machine is divided into:\n* Datapath  \n* Controller\n\nThe controller has been implemented using µinstructions');
gettext('test-acc');
gettext('4B memory test acc. Calculates M0 = M0 + M1');
gettext('upload');
gettext('4B memory upload machine. Initilize the memory with data from the stdin');
gettext('download');
gettext('8B memory download machine');
gettext('Multiplexor de 2 a 1 de 13 bits');
gettext('dump-tx');
gettext('8B Memory dump tx machine');
gettext('8B memory dump machine');
gettext('Create an 8-bit bus from two buses of 5 and 3 bits');
gettext('5-bit Constant 0 value');
gettext('Valor genérico constante, de 5 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('dump');
gettext('icerok-probe');
gettext('8 bytes buffer Logic analicer probe');
gettext('8B memory. Bus interface');
gettext('8 Bytes Synchronous memory');
gettext('8B memory sample machine. Captura the input data and store it in the memory');
gettext('init');
gettext('8B memory init machine. Initilize the memory with consecutive numbers');
gettext('sample');
gettext('seq');
gettext('8B memory seq machine');
gettext('sum');
gettext('8B memory sum. Calculates M0 = M1 + M2 + ..+ M7');
gettext('Circuito combinacional de 4 entradas y 6 salidas');
gettext('Habilitación de bus de 6 bits');
gettext('Separador de bus de 6-bits en dos de 3bits');
gettext('test-acc');
gettext('8B memory test acc. Calculates M0 = M0 + M1');
gettext('Bus joiner: 2-bits + 1bits into a 3-bits bus');
gettext('upload');
gettext('8B memory upload machine. Initilize the memory with data from the stdin');
gettext('06-bits');
gettext('Bus');
gettext('Join');
gettext('Join the fields into one 06-bits memory map bus');
gettext('Split');
gettext('Split a 06-bits memory map bus into its fields');
gettext('01-bit');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('08-bits');
gettext('Blocks');
gettext('Reg-rst');
gettext('1bit register with rst (implemented in verilog)');
gettext('Initial value');
gettext('Reg');
gettext('1bit register (implemented in verilog)');
gettext('Reg-rst');
gettext('1-Bit register with rst (Implemented with icestudio blocks)');
gettext('Reg');
gettext('Blocks');
gettext('Reg-rst');
gettext('2-bits register with reset (in verilog)');
gettext('Reg');
gettext('2-bits register (in verilog)');
gettext('Reg-rst');
gettext('2-bits register with reset (implemented with blocks)');
gettext('Reg');
gettext('Blocks');
gettext('Reg');
gettext('3-bits register (in verilog)');
gettext('Reg');
gettext('3-bits register (implemented with blocks)');
gettext('Agregador de 3 cables en un bus de 3-bits');
gettext('Blocks');
gettext('Reg');
gettext('4-bits register (in verilog)');
gettext('Reg');
gettext('Blocks');
gettext('Reg-rst');
gettext('Reg');
gettext('Reg');
gettext('Bytes');
gettext('KiB');
gettext('Bus');
gettext('memory-002B');
gettext('memory-004B');
gettext('memory-008B');
gettext('memory-016B');
gettext('memory-032B');
gettext('32 Bytes Synchronous memory');
gettext('memory-064B');
gettext('64 Bytes Synchronous memory');
gettext('memory-128B');
gettext('128 Bytes Synchronous memory');
gettext('memory-256B');
gettext('256 Bytes Synchronous memory');
gettext('memory-512B');
gettext('512 Bytes Synchronous memory');
gettext('memory-002B-bus');
gettext('memory-004B-bus');
gettext('memory-008B-bus');
gettext('memory-016B-bus');
gettext('memory-01KiB');
gettext('1KiB Bytes Synchronous memory');
gettext('memory-02KiB');
gettext('2KiB Bytes Synchronous memory');
gettext('memory-04KiB');
gettext('4KiB Bytes Synchronous memory');
gettext('memory-08KiB');
gettext('8KiB Bytes Synchronous memory');
gettext('memory-16KiB');
gettext('TESTs');
gettext('Banks');
gettext('Machines');
gettext('Regs');
gettext('SMem');
gettext('SMem-bus');
gettext('01-bit');
gettext('08-bits');
gettext('Bank-2x1');
gettext('Bank-4x1');
gettext('Bank-8x1');
gettext('Reg-automatic-test');
gettext('Emitir un tic inicial al arrancar, y nunca más. Se esperan 32 tics antes de emitir el tic de inicialización');
gettext('Separador de bus de 6-bits en 1 bit y bus de 5 bits');
gettext('Contador del sistema, ascendente, de 6 bits, con enable ');
gettext('Comparador de dos operandos de 1 bit');
gettext('Serial transmiter for the stdout bus');
gettext('Print a constant string of 15 or less characters');
gettext('16-bytes memory, initilized with a string');
gettext('Secuencia del coche fantástico, con entrada de enable');
gettext('Corazón de bombeo de tics con periodo paramétrico de milisegundos y entrada de enable');
gettext('Contador módulo M, ascendente, de 4 bits, con reset ');
gettext('Baliza luminosa de 1 led. Parpadea a 2Hz cuando se activa');
gettext('Bombear 2 bits por segundo');
gettext('Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)');
gettext('Multiplicador de cables. Genera un bus de 8 bits, a patir del bit de entrada');
gettext('Circuito combinacional de 4 entradas y 4 salidas');
gettext('# Bank 2x1: Automatic testing\n');
gettext('## Unit under test');
gettext('## Verification table');
gettext('Compare the current output with the  \ncorrect value from the table');
gettext('0: Current test NOT passed  \n1: Current test passed! OK!');
gettext('ERROR state:  \n0: No error so far  \n1: At least one test NOT passed');
gettext('Test finished');
gettext('The end-tic is sent to one  \ncircuit or another depending  \non the error state');
gettext('## SUCESS!!');
gettext('##  ERROR. Tests NOT passed!!');
gettext('## The result is printed on the Console');
gettext('2x1 register Bank');
gettext('**Parámetro**: Módulo del contador');
gettext('**Baliza luminosa**\n\nParpadeo del LED a 2Hz');
gettext('Creado a partir de un **corazón  \ngenérico**, dando el valor adecuado  \na su parámetro frecuencia');
gettext('Reg-manual-test');
gettext('Detección de pulsación. Emite un tic cada vez que se aprieta el pulsador');
gettext('Detect different clicks on the button: normal click, doble click or long click');
gettext('Pulsador con tic de cambio, pulsación y liberación de tecla');
gettext('Sincronizar las entradas de datos con el reloj del sistema');
gettext('Remove the rebound on a mechanical switch');
gettext('Detect changed on the input signal ');
gettext('Test if a tic is received within time');
gettext('Timer in ms, with start and stop');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en micro-segundos. Solo se hace el bombeo cuando está habilitado');
gettext('Contador módulo M, ascendente, de 12 bits, con reset ');
gettext('## Bank-2x1: Manual testing\n\nUse Switch 1 for setting the input data (0/1)  \nUse Switch 2 for setting the address (0/1)\nLong press on Switch 1 for writing the data to the current register\n');
gettext('Data to store  \n(0/1)');
gettext('Address (0/1)');
gettext('Show the current  \nregister in LED0');
gettext('Show the data in  \nLED5');
gettext('Show the current  \naddr in LED7');
gettext('Long click');
gettext('Normal click');
gettext('**Pulsador-tic**');
gettext('## Button-click-3  \n\nDetect three different types of clicks in the Button:\n\n* Normal click  \n* Doble click  \n* Long click');
gettext('When the button is pressed  \nthe timer 1 is started');
gettext('If the button is pressed again  \nwithin the time, it is  \na doble click');
gettext('Timeout: It was  \nnot a doble click');
gettext('Check the current  \nbutton state: pressed  \nor not pressed');
gettext('Button state');
gettext('Button state:  \n1: Pressed  \n2: Not pressed');
gettext('Button is released:  \nwe have a click  \nIt is NOT a long click');
gettext('Button is still  \npressed: we do not know yet  \nif it is a click or long click');
gettext('Timeout for detecting a \ndoble click  \nAfter this time is not considered a  \ndoble click but two clicks in a row');
gettext('Wait for the release  \ntic');
gettext('Release tic has arrived  \nwithin time: it was a  \nnormal click  ');
gettext('In both cases it is  \nconsider a normal click');
gettext('The button has not been  \nreleased after the specified  \ntime: it is a long click');
gettext('**Outputs**');
gettext('## Change detector  \n\nIt emits the followings tics:\n\n* When there is a rising edge on the input signal\n* When there is a falling edge\n* When there is either a rising or falling edge');
gettext('## Timer-ms\n\nWhen the machine is active, it detects if  \nan input tic arrive within the specified time  \nIf so, another tic is sent to done. If no tic is  \nreceived within time (timeout), a tic is sent  \nto tout');
gettext('Start the machine');
gettext('Tic to detect within time');
gettext('Main timer');
gettext('Start the timer');
gettext('If a tic is received when  \nthe timer is still on,  \nlet it pass...');
gettext('The tic is delayed one unit  \nto prevent reache the timer  \nin the same cycle than start  \n(it can happens if the same tic is  \nconnect both to start and tic inputs)  ');
gettext('Stop the timer:  the tic  \nhas arrived in time');
gettext('The tic arrived in time  \nTic detected!');
gettext('No tic detected  \nwithin time');
gettext('The machine is on');
gettext('tic: No input tic detected');
gettext('tic: input tic detected!');
gettext('Biestable de estado  \nde la máquina');
gettext('Mientras la máquina  \nesté apagada el  \ncontador está a 0');
gettext('Contador de tiempo  \nen unidades de  \nmilisegundos');
gettext('El tiempo ha expirado:  \napagar la máquina');
gettext('Unidades de tiempo:  \n1000 microsec = 1ms');
gettext('Al arrancar la máquina,  \neste corazón emite un  \ntic cada 1 ms');
gettext('**Parámetro**:  \nms de espera');
gettext('Sacar el tic de apagado de  \nla máquina por abort o done  \nsegún cómo haya sido');
gettext('Si es por stop: El timer ha abortado  \nSi no, es una terminación normal (timeout)');
gettext('Paralell-Reg-manual-test');
gettext('Contador módulo M, ascendente, de 2 bits, con reset ');
gettext('## Bank-4x1-paralell: Manual testing\n\nUse SW1 for toggle the data stored on the current register  \nUse SW2 for selecting the register address (0-3)  \n');
gettext('Address (0-3)');
gettext('4x1 register Bank');
gettext('Show the current  \naddr in LEDs 7 and 6');
gettext('Counter');
gettext('The data to be written is  \nthe current data negated');
gettext('Toggle the current  \ndata');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 5 entradas y 5 salidas');
gettext('Print a base4 number in Binary');
gettext('Registro de 2 bits');
gettext('# Bank 4x1: Automatic testing\n');
gettext('Print the current  \nbit');
gettext('Base 4 number to print');
gettext('Reg-manual-test');
gettext('## Bank-4x1: Manual testing\n\nUse SW1 for setting the data to write (0/1)  \nUse SW2 for selecting the register address (0-3)  \nUse a Long click in SW1 to write the data into the current reg\n');
gettext('Show the data in  \nLED4');
gettext('Paralell-Reg-manual-test');
gettext('Contador módulo M, ascendente, de 3 bits, con reset ');
gettext('## Bank-8x1-paralell: Manual testing\n\nThe whole bank registers are shown in the 8 LEDs  \nWith the SW1 button, the content of the current reg is toggled  \nWith the sW2 button, the addres is increased  \nThis simple mechanism allows you to change all the register and  \ncheck that the bank is working properly\n\n');
gettext('Address (0-7)');
gettext('8x1 register Bank');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 6 entradas y 6 salidas');
gettext('Máquina de contar, de 6 bits');
gettext('Print a 3-bits number in Binary');
gettext('Registro de desplazamiento (izquierda) de 3 bits');
gettext('# Bank 8x1: Automatic testing\n');
gettext('First the MSB is  \nprinter');
gettext('## Print-bin-3-bits: Transmit one 3-bits number in Binary\n\nWhen activated, the 3-bits number is sent as three binary  \ncharacters (0/1)');
gettext('Reg-manual-test');
gettext('## Bank-8x1: Manual testing\n\nUse SW1 for toggling the current register (writing)  \nUse SW2 for selecting the register address (0-7)');
gettext('Addres (0-7)');
gettext('8x1 Bank');
gettext('Show the current  \nreg in the LED0');
gettext('Show the current  \naddress in the LEDs');
gettext('Toggle the current reg');
gettext('Write the data');
gettext('Bank-2x8');
gettext('Bank-4x8');
gettext('Bank-8x8');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 4 entradas y 18 salidas');
gettext('Split a 18 bits bus into two of  1 and 17 bits buses');
gettext('Split a 17 bits bus into two of  8 and 9 bits buses');
gettext('Separador de bus de 9-bits en uno de 1bit y otro de 8bits');
gettext('Comparador de dos operandos de 8 bits');
gettext('Print a 8-bits number in Binary');
gettext('Registro de desplazamiento (izquierda) de 8 bits');
gettext('# Bank 2x8: Automatic testing\n');
gettext('2x8 register Bank');
gettext('state machine  \n');
gettext('## Print-bin-8-bits: Transmit one 8-bits number in Binary\n\nWhen activated, the 8-bits number is sent as three binary  \ncharacters (0/1)');
gettext('Reg-manual-test');
gettext('Contador módulo M, ascendente, de 3 bits');
gettext('Circuito combinacional de 3 entradas y 8 salidas');
gettext('## Bank-2x8: Manual testing\n\nUse Switch 1 for setting the input data (it is selected from the table)   \n and writting it to the current register  \nUse Switch 2 for setting the address (0/1)\n');
gettext('Data to store  ');
gettext('Show the current  \nregister in the LEDs');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 5 entradas y 19 salidas');
gettext('Split a 19 bits bus into two of  2 and 17 bits buses');
gettext('# Bank 4x8: Automatic testing\n');
gettext('4x8 register Bank');
gettext('Reg-manual-test');
gettext('## Bank-4x8: Manual testing\n\nUse Switch 1 for setting the input data (it is selected from the table)   \n and writting it to the current register  \nUse Switch 2 for setting the address (0-3)\n');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 6 entradas y 20 salidas');
gettext('Split a 20-bit bus into one of 3-bits and another of 17-bits');
gettext('# Bank 8x8: Automatic testing\n');
gettext('8x8 register Bank');
gettext('Reg-manual-test');
gettext('## Bank-8x8: Manual testing\n\nUse Switch 1 for setting the input data (it is selected from the table)   \n and writting it to the current register  \nUse Switch 2 for setting the address (0-7)\n');
gettext('Bytes');
gettext('002B');
gettext('004B');
gettext('008B');
gettext('016B');
gettext('dump-tx');
gettext('# Testing the dump-tx machine  \n\nWhen the sw1 button is pressed, the memory content  \nis dumped to the serial console\n\nUse long press on buttons 1 or 2 to change the  \nmemory contents');
gettext('Click on the button 1 for  \ndumping the memory');
gettext('Long click on Button 1  \nfor init the memory with  \nvalue 1');
gettext('Long click on Button 2  \nfor init the memory with  \nvalue 2');
gettext('dump');
gettext('# Testing the dump machine  \n\nWhen the sw1 button is pressed, the memory content  \nis dumped to the serial console');
gettext('Press the button for  \ndumping the memory');
gettext('icerok-probe');
gettext('Contador del sistema, de 8 bits');
gettext('# Testing the icerok-probe machine\n\nA 8 bits counter is running. It is incremented on  \nevery system clock pulse. When the button 1 is  \npressed, the data capturing is enable. The data is  \nrecorded into the memory and sent to the PC  \nby serial port (raw data)\n\nAn application in the computer reads the data  \n(it can be the icerok icestudio plugin or any other  \nprogram)');
gettext('Free running  \n8-bit counter');
gettext('Use the sw1 button for  \nstaring the capturing of  \nthe data (on every system  \nclock cycle)');
gettext('init-seq-leds');
gettext('# Testing the Init machine  \n\nThe button 1 is used for showing the memory  \ncontents in the LEDs (sequencially)  \nPressing the button 2 fill the memory with  \nconsecutive numbers starting from the init  \nvalue');
gettext('Press the button for  \nstarting the sequence on  \nthe LEDs  ');
gettext('seq-leds');
gettext('# Testing the Seq machine  \n\nWhen the button is pressed, the contents of  \nthe memory are displayed in the leds,  \nsequentially, starting from the 0 address  \n\nThe time between values is 400 ms');
gettext('test-acc-dump-tx');
gettext('# Testing the test-acc machine  \n\nUse the sw1 button for dumping the memory  \nUse the sw2 button for executing the operation:  \n* M0 = M0 + M1  \n\nwhere M0 and M1 are the bytes located at address 0 and  \n1 respectivelly');
gettext('Use Button 1 for printing\nthe memory in the contents');
gettext('Use Button 2 for executing  \nthe operation M0 = M0 + M1');
gettext('Operation:  \n* M0 = M0 + M1');
gettext('upload-dump');
gettext('Componente genérico');
gettext('Receptor serie asíncrono. Velocidad por defecto: 115200 baudios');
gettext('stdin bus joiner (data + tic)');
gettext('# Testing the upload machine  \n\nWhen the button 1 is pressed, the memory is printed  \non the serial control  \nWhen the button 2 is pressed, the upload mode is  \nentered. The led7 is on and all the bytes received  \nfrom the serial console are written into memory  \nsequentially  \nOne the memory has been uploaded it will be automatically  \nbe printed on the serial console');
gettext('Use Button 1 for printing\nthe memory contents');
gettext('Use Button 2 for uploading data  \nto the memory, from the serial console');
gettext('The memory is dumped either when the  \nupload machine is done (automatic dump)  \nor when the Button 1 is pressed (Manual dump)');
gettext('## STDIN serial\n\nSerial receiver for the STDIN bus\n');
gettext('**STDIN Bus**  \n* Data received (8 bits)  \n* tic (1 bit)');
gettext('upload-test-acc-dump');
gettext('# Testing the upload machine  \n\nUse a long click on button 2 for uploading data into  \nthe memory. A click on button 2 will perform the operation:  \nM0 = M0 + M1  \nPressing button 1 will print the memory contents on the  \nconsole  ');
gettext('Use Button 2 for performing the operation  \nM0 = M0 + M1');
gettext('Use a long click on Button 2 for uploading  \ndata into the memory');
gettext('01-seq-leds');
gettext('02-init-seq-leds');
gettext('03-dump');
gettext('04-dump-tx');
gettext('05-test-acc-dump-tx');
gettext('06-sum-dump-tx');
gettext('# Testing the sum machine  \n\nUse the sw1 button for dumping the memory  \nUse the sw2 button for executing the operation:  \n* M0 = M1 + M2 + M3  \n\nwhere Mx is the byte located at address x ');
gettext('07-upload-dump');
gettext('08-upload-test-acc-dump');
gettext('09-upload-sum-dump');
gettext('# Testing the upload machine  \n\nUse a long click on button 2 for uploading data into  \nthe memory. A click on button 2 will perform the operation:  \nM0 = M1 + M2 + M3  \nPressing button 1 will print the memory contents on the  \nconsole  ');
gettext('Operation:  \n* M0 = M1 + M2 + M3');
gettext('10-icerok-probe');
gettext('01-seq-leds');
gettext('02-init-seq-leds');
gettext('03-dump');
gettext('04-dump-tx');
gettext('05-test-acc-dump-tx');
gettext('06-sum-dump-tx');
gettext('# Testing the sum machine  \n\nUse the sw1 button for dumping the memory  \nUse the sw2 button for executing the operation:  \n* M0 = M1 + M2 + .. + M7  \n\nwhere Mx is the byte located at address x ');
gettext('Use Button 2 for executing  \nthe operation');
gettext('07-upload-dump');
gettext('08-upload-sum-dump');
gettext('# Testing the upload machine  \n\nUse a long click on button 2 for uploading data into  \nthe memory. A click on button 2 will perform the operation:  \nM0 = M1 + M2 + .. + M7  \nPressing button 1 will print the memory contents on the  \nconsole  ');
gettext('Use Button 2 for performing the operation  \n');
gettext('09-icerok-probe');
gettext('01-seq-leds');
gettext('02-init-seq-leds');
gettext('03-dump');
gettext('04-dump-tx');
gettext('05-test-acc-dump-tx');
gettext('06-sum-dump-tx');
gettext('# Testing the sum machine  \n\nUse the sw1 button for dumping the memory  \nUse the sw2 button for executing the operation:  \n* M0 = M1 + M2 + .. + M15  \n\nwhere Mx is the byte located at address x ');
gettext('07-upload-dump');
gettext('08-upload-sum-dump');
gettext('09-icerok-probe');
gettext('01-bit');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('08-bits');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 3 entradas y 3 salidas');
gettext('Print a constant string of 31 or less characters');
gettext('32-bytes memory, initilized with a string');
gettext('Máquina de contar, de 5 bits, con entrada de stop');
gettext('# 1-bit register: Automatic testing\n');
gettext('1 Bit register');
gettext('Reg-manual-test');
gettext('Pulsador de cambio. Cada vez que se aprieta cambia de estado');
gettext('## 1-bit register: Manual testing\n\nUse Switch 1 for setting the input data (0/1)  \nUse Swtich 2 for capturing the data');
gettext('Show the register  \nin the LED0\n');
gettext('Select the input bit  \n(0/1)');
gettext('This bit is shown in  \nLED7');
gettext('Use this pushbutton  \nfor loading the data  \ninto the register');
gettext('Valor inicial del pulsador\n');
gettext('Reg-rst-automatic-test');
gettext('Separador de bus de 4-bits en buses de 1 bits y 3 bits');
gettext('# 1-bit register with reset: Automatic testing\n');
gettext('Reg-rst-manual-test');
gettext('## 1-bit register with reset: Manual testing\n\nUse Switch 1 for setting the input data (0/1)  \nUse Swtich 2 for capturing the data  \nUse a long press on Switch 1 for reseting');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 4 entradas y 5 salidas');
gettext('# 2-bits register: Automatic testing\n');
gettext('2 Bits register');
gettext('Reg-manual-test');
gettext('Counter: Data to be    \ncaptured in the register');
gettext('Select the input  \ndata (0,1,2,4)');
gettext('## 2-bits register: Manual testing\n\nUse Switch 1 for setting the input data (0,1,2,3)  \nUse Swtich 2 for capturing the data');
gettext('2-Bits register');
gettext('Show the register  \nin the LEDs \n');
gettext('Show the input  \nin the LEDs\n');
gettext('Reg-rst-automatic-test');
gettext('# 2-bits register with reset: Automatic testing\n');
gettext('Reg-rst-manual-test');
gettext('## 2-bits register with reset: Manual testing\n\nUse Switch 1 for setting the input data (0,1,2,3)  \nUse Swtich 2 for capturing the data');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 4 entradas y 7 salidas');
gettext('Separador de bus de 7-bits en dos buses de 3 y 4 bits');
gettext('# 3-bits register: Automatic testing\n');
gettext('3 Bits register');
gettext('Reg-manual-test');
gettext('Select the input  \ndata');
gettext('## 3-bits register: Manual testing\n\nUse Switch 1 for setting the input data (0-7)  \nUse Swtich 2 for capturing the data');
gettext('3-Bits register');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 4 entradas y 9 salidas');
gettext('Spit a 9-bits bus into 4-bits and 5-bits buses');
gettext('Split a 5-bits bus into 1-bit and 4-bits buses');
gettext('Print a 4-bits number in Binary');
gettext('Registro de desplazamiento (izquierda) de 4 bits');
gettext('# 4-bits register: Automatic testing\n');
gettext('4 Bits register');
gettext('## Print-bin-4-bits: Transmit one 4-bits number in Binary\n\nWhen activated, the 4-bits number is sent as three binary  \ncharacters (0/1)');
gettext('Reg-manual-test');
gettext('## 4-bits register: Manual testing\n\nUse Switch 1 for setting the input data (0-15)  \nUse Swtich 2 for capturing the data');
gettext('4-Bits register');
gettext('Reg-automatic-test');
gettext('Circuito combinacional de 5 entradas y 17 salidas');
gettext('# 8-bits register: Automatic testing\n');
gettext('8 Bits register');
gettext('Reg-manual-test');
gettext('Contador módulo M, ascendente, de 8 bits, con reset ');
gettext('## 8-bits register: Manual testing\n\nUse Switch 1 for setting the input data (0-255)  \nUse Switch 2 for capturing the data');
gettext('8-Bits register');
gettext('Reg-rst-manual-test');
gettext('Bytes');
gettext('KiB');
gettext('Bytes');
gettext('002B');
gettext('004B');
gettext('008B');
gettext('016B');
gettext('dump-leds');
gettext('Bombear 1 bit con el periodo especificado en el parámetro (en ms). Por defecto el periodo es de 100 ms');
gettext('dump-leds');
gettext('Corazón de bombeo de tics a con periodo paramétrico de milisegundos');
gettext('dump-leds');
gettext('dump-leds');
gettext('002B');
gettext('004B');
gettext('008B');
gettext('016B');
gettext('032B');
gettext('064B');
gettext('128B');
gettext('256B');
gettext('512B');
gettext('Smem-automatic-test');
gettext('# 2B Memory (2x8): Automatic testing\n');
gettext('2B Memory');
gettext('Read the memory output in  \nthe next cycle');
gettext('Smem-manual-test');
gettext('## Sync memory 2B (2x8): Manual testing\n\nUse Switch 1 for setting the input data (it is selected from the table)   \n and writting it to the current position  \nUse Switch 2 for setting the address (0/1)\n');
gettext('2Bytes memory');
gettext('Show the current  \nposition in the LEDs');
gettext('Smem-automatic-test');
gettext('# 4B Memory (4x8): Automatic testing\n');
gettext('4B Memory');
gettext('Smem-manual-test');
gettext('## Sync memory 4B (4x8): Manual testing\n\nUse Switch 1 for setting the input data (it is selected from the table)   \n and writting it to the current position  \nUse Switch 2 for setting the address (0-3)\n');
gettext('4Bytes memory');
gettext('Data selection and  \nwrite');
gettext('Address selection');
gettext('Smem-automatic-test');
gettext('# 8B Memory (8x8): Automatic testing\n');
gettext('8B Memory');
gettext('Smem-manual-test');
gettext('## Sync memory 8B (8x8): Manual testing\n\nUse Switch 1 for setting the input data (it is selected from the table)   \n and writting it to the current position  \nUse Switch 2 for setting the address (0-7)\n');
gettext('8Bytes memory');
gettext('Smem-automatic-test');
gettext('Display the Testbench result on the LEDs');
gettext('Test value to write at the current  \nmemory position: addr + seed,  \nDuring the writting stage');
gettext('Compare the data written during the first  \nstage with the actual memory content  \nThey should be equal');
gettext('## Memory Under Test');
gettext('The write command should be valid  \nonly when the machine is running');
gettext('Print the table header  \ninitially');
gettext('## 1-bit Count Machine\n\nThere are two stages:\n\n* Stage 0: Writting stage\n* Stage 1: Reading and checking stage');
gettext('### 4-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
gettext('Stage 0: move to the next address');
gettext('Stage 1: Print the result');
gettext('Print the address');
gettext('Print the Data');
gettext('Move to the next  \naddress');
gettext('## Display a sequence in the LEDs');
gettext('# 16B Memory (16x8): Automatic testing\n');
gettext('### SUCESS animation');
gettext('### Test not passed');
gettext('Sequence state: on/off');
gettext('The \"Knight rider\" sequence  \non the LEDs');
gettext('Blink all the leds at the  \nsame time');
gettext('Smem-manual-test');
gettext('## Sync memory 16B (16x8): Manual testing\n\nUse Switch 1 for setting the input data (it is selected from the table)   \n and writting it to the current position  \nUse Switch 2 for setting the address (0-15)\n');
gettext('16Bytes memory');
gettext('Smem-automatic-test');
gettext('Create an 8-bit bus from two buses of 3 and 5 bits');
gettext('# 32B Memory (32x8): Automatic testing\n');
gettext('### 5-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
gettext('Smem-manual-test');
gettext('Contador módulo M, ascendente, de 5 bits, con reset ');
gettext('## Sync memory 32B (32x8): Manual testing\n\nUse Switch 1 for setting the input data (it is selected from the table)   \n and writting it to the current position  \nUse Switch 2 for setting the address (0-15)\n');
gettext('32Bytes memory');
gettext('Smem-automatic-test');
gettext('Agregador de 2 buses de 2 y 6-bits a bus de 8-bits');
gettext('# 64B Memory (64x8): Automatic testing\n');
gettext('### 6-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
gettext('Smem-manual-test');
gettext('Contador módulo M, ascendente, de 6 bits, con reset ');
gettext('## Sync memory 64B (64x8): Manual testing\n\nUse Switch 1 for setting the input data (it is selected from the table)   \n and writting it to the current position  \nUse Switch 2 for setting the address (0-15)\n');
gettext('64Bytes memory');
gettext('Smem-automatic-test');
gettext('Máquina de contar, de 7 bits');
gettext('Registro de 7 bits con reset');
gettext('7-bits adder. One operand is a constant (no carry)');
gettext('two operand 7-bits comparator');
gettext('Valor genérico constante (menos 1), de 7 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Agregador de 1 cable y un bus de 7-bits a bus de 8-bits');
gettext('# 128B Memory (128x8): Automatic testing\n');
gettext('### 7-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
gettext('Smem-automatic-test');
gettext('Máquina de contar, de 8 bits');
gettext('Registro de 8 bits con reset');
gettext('Valor genérico constante (menos 1), de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('# 256B Memory (256x8): Automatic testing\n');
gettext('### 8-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
gettext('Smem-automatic-test');
gettext('Sumador de un operando de 9 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Máquina de contar, de 9 bits');
gettext('9-bits register with reset');
gettext('Two 9-bit operands comparator');
gettext('Valor genérico constante (menos 1), de 9 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Print a 12-bit number in hexadecimal numbers');
gettext('Registro de 12 bits');
gettext('Split the 12-bit bus into a 3 buses of 4-bits ');
gettext('Multiplexor de 4 a 1 de 4 bits');
gettext('Join an 3-bit bus and a 9-bit bus into a 12-bits bus');
gettext('# 512B Memory (512x8): Automatic testing\n');
gettext('## Print-hex-12: Print a 12-bit number in hexadecimal');
gettext('01KiB');
gettext('02KiB');
gettext('04KiB');
gettext('08KiB');
gettext('16KiB');
gettext('Smem-automatic-test');
gettext('Máquina de contar, de 10 bits');
gettext('Registro de 10 bits con entrada de reset');
gettext('Sumador de un operando de 10 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 10 bits. Se compara si el operando es igual al parámetro');
gettext('Valor genérico constante (menos 1), de 10 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Split the 10-bit bus into a 2-bits bus and a 8-bits bus');
gettext('Join an 2-bit bus and a 10-bit bus into a 12-bits bus');
gettext('# 1KiB Memory (1024x8): Automatic testing\n');
gettext('### 10-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
gettext('Smem-automatic-test');
gettext('Sumador de un operando de 11 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Split the 11-bit bus into a 3-bits bus and a 8-bits bus');
gettext('Join an 1-bits bus and a 11-bit bus into a 12-bits bus');
gettext('Máquina de contar, de 11 bits');
gettext('Registro de 11 bits con entrada de reset');
gettext('Comparador de dos operandos de 11 bits. Se compara si el operando es igual al parámetro');
gettext('Valor genérico constante (menos 1), de 11 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('# 2KiB Memory (2048x8): Automatic testing\n');
gettext('### 11-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
gettext('Smem-automatic-test');
gettext('Sumador de un operando de 12 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Split the 12-bit bus into a 4-bits bus and a 8-bits bus');
gettext('Máquina de contar, de 12 bits');
gettext('12-bits reg with reset');
gettext('Valor genérico constante (menos 1), de 12 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Comparador de dos operandos de 12 bits');
gettext('# 4KiB Memory (4096x8): Automatic testing\n');
gettext('### 12-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
gettext('Smem-automatic-test');
gettext('Sumador de un operando de 13 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Separador de bus de 13-bits en uno de 5bit y otro de 8bits');
gettext('Print a 16-bit number in hexadecimal numbers');
gettext('Registro de 16 bits');
gettext('Separador de bus de 16-bits en buses de 8 bits');
gettext('Joint a 3-bit and 13-bit buses into a 16-bit bus');
gettext('Máquina de contar, de 13 bits');
gettext('13-bits reg with reset');
gettext('Comparador de dos operandos de 13 bits');
gettext('Valor genérico constante (menos 1), de 13 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('# 8KiB Memory (8192x8): Automatic testing\n');
gettext('### 13-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
gettext('## Print-hex-16: Print a 16-bit number in hexadecimal');
gettext('Smem-automatic-test');
gettext('Sumador de un operando de 14 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Separador de bus de 14-bits en uno de 6bit y otro de 8bits');
gettext('Joint a 2-bit and 14-bit buses into a 16-bit bus');
gettext('Máquina de contar, de 14 bits');
gettext('Registro de 14 bits con entrada de reset');
gettext('Comparador de dos operandos de 14 bits. Se compara si el operando es igual al parámetro');
gettext('Valor genérico constante (menos 1), de 14 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('# 16KiB Memory (16384x8): Automatic testing\n');
gettext('### 14-bits Count Machine\n\nThis machine generates the address  \nfor the memory');
